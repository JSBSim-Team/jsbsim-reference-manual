<?xml version="1.0"?>


<autopilot name="C-172X Autopilot">

    <!-- INTERFACE PROPERTIES -->

    <!-- Wing Lever with ailerons -->
    <property> ap/attitude-hold           </property>

    <!-- Altitude Control with elevator -->
    <property> ap/altitude-hold           </property>
    <property> ap/altitude-setpoint       </property>

    <!-- Heading Control with ailerons-->
    <property> ap/heading-hold            </property>
    <property> ap/heading-setpoint-select </property>
    <property> ap/heading-setpoint        </property>
    <property> ap/active-waypoint         </property>
    <property> ap/last-waypoint           </property>

    <!-- Theta angle Control with elevator -->
    <property> ap/theta-angle-hold        </property>
    <property> ap/theta-angle-setpoint    </property>

    <!-- Glide angle Control with throttle -->
    <property> ap/glide-angle-throt-hold     </property>
    <property> ap/glide-angle-throt-setpoint </property>

    <!-- Glide angle Control with elevator -->
    <property> ap/glide-angle-elev-hold     </property>
    <property> ap/glide-angle-elev-setpoint </property>

    <!-- Speed magnitude Control with throttle -->
    <property> ap/airspeed-throt-setpoint   </property>
    <property> ap/airspeed-throt-hold       </property>


    <!-- INITIAL GAIN VALUES -->

    <!-- Wing leveler -->
    <property value="0.50000"> ap/hdg-roll-err-c1 </property>
    <property value="50.0000"> ap/roll-pid-kp     </property>
    <property value="5.00000"> ap/roll-pid-ki     </property>
    <property value="17.0000"> ap/roll-pid-kd     </property>

    <!-- Heading hold -->
    <property value="2.50"> ap/heading-pid-kp </property>
    <property value="0.00"> ap/heading-pid-ki </property>
    <property value="5.00"> ap/heading-pid-kd </property>

    <!-- Altitude hold -->
    <property value="0.03000"> ap/altit-pid-kp </property>
    <property value="0.00100"> ap/altit-pid-ki </property>
    <property value="0.00000"> ap/altit-pid-kd </property>

    <!-- Theta angle hold for elevator -->
    <property value="10.0">  ap/theta-pid-kp </property>
    <property value="0.50">  ap/theta-pid-ki </property>
    <property value="4.00">  ap/theta-pid-kd </property>

    <!-- Glide angle hold for throttle -->
    <property value="0.00000700"> ap/throttle-pid-kp </property>
    <property value="0.00000125"> ap/throttle-pid-ki </property>
    <property value="0.00000300"> ap/throttle-pid-kd </property>

    <!-- Glide angle hold for elevator -->
    <property value="0.0200"> ap/gamma-pid-kp </property>
    <property value="0.0040"> ap/gamma-pid-ki </property>
    <property value="0.0783"> ap/gamma-pid-kd </property>

    <!-- Speed magnitude hold with throttle -->
    <property value="0.000016">   ap/V-throttle-pid-kp  </property>
    <property value="0.0000000">  ap/V-throttle-pid-ki  </property>
    <property value="0.000325">   ap/V-throttle-pid-kd  </property>

<!--
=====================================================
ROLL CHANNEL
=====================================================
-->

<!-- Wing leveler -->

    <channel name="Roll wing leveler">
        <sensor name="fcs/attitude/sensor/phi-rad">
            <input> attitude/phi-rad </input>
            <lag> 0.5 </lag>
            <delay> 2 </delay>
            <noise variation="PERCENT"
                   distribution="GAUSSIAN"> 0.05 </noise>
            <quantization name="attitude/sensor/quantized/phi-rad">
                <bits> 12 </bits>
                <min> -3.1416 </min>
                <max>  3.1416 </max>
            </quantization>
            <bias> 0.001 </bias>
        </sensor>

        <switch name="fcs/wing-leveler-ap-on-off">
            <default value="-1" />
            <test value="0">
                ap/attitude-hold == 1
            </test>
        </switch>

        <pid name="fcs/roll-ap-error-pid">
            <input>attitude/phi-rad</input>
            <kp> ap/roll-pid-kp </kp>
            <ki> ap/roll-pid-ki </ki>
            <kd> ap/roll-pid-kd </kd>
            <trigger> fcs/wing-leveler-ap-on-off </trigger>
        </pid>

        <switch name="fcs/roll-ap-autoswitch">
            <default value="0.0"/>
            <test value="-fcs/roll-ap-error-pid">
                ap/attitude-hold == 1
            </test>
        </switch>
    </channel>



<!-- Heading hold -->

    <channel name="Roll heading hold">

        <!-- The heading setpoint selector selects the heading
        command (setpoint), which can either be set directly, or
        calculated by the specification of waypoint. If the
        heading setpoint selector is 0, then the heading setpoint
        is used, if the selector is 1, then the heading calculated
        from the waypoint is used. -->

        <switch name="fcs/heading-setpoint-selector">
            <default value="ap/heading-setpoint"/>
            <test value="guidance/wp-heading-deg">
                ap/heading-setpoint-select == 1
            </test>
        </switch>

        <pure_gain name="fcs/heading-true-degrees">
            <input>attitude/heading-true-rad</input>
            <gain>57.3</gain>
            <!-- convert to degrees -->
        </pure_gain>

        <summer name="fcs/heading-error">
            <input> -fcs/heading-true-degrees</input>
            <input> fcs/heading-setpoint-selector </input>
        </summer>

        <switch name="fcs/heading-error-bias-switch">
            <default value="0.0"/>
            <test value="360.0">
                fcs/heading-error lt -180
            </test>
            <test value="-360.0">
                fcs/heading-error gt 180
            </test>
        </switch>

        <summer name="fcs/heading-corrected">
            <input> fcs/heading-error-bias-switch </input>
            <input> fcs/heading-error </input>
            <clipto>
                <min>-30</min>
                <max>30</max>
            </clipto>
        </summer>

        <pure_gain name="fcs/heading-command">
            <input> fcs/heading-corrected </input>
            <gain> 0.01745 </gain>
        </pure_gain>

        <lag_filter name="fcs/heading-roll-error-lag">
            <input> fcs/heading-command </input>
            <c1> ap/hdg-roll-err-c1 </c1>
        </lag_filter>

        <summer name="fcs/heading-roll-error">
            <input> fcs/heading-roll-error-lag </input>
            <input> -attitude/phi-rad </input>
        </summer>

        <switch name="fcs/heading-roll-error-switch">
            <default value="0.0"/>
            <test value="fcs/heading-roll-error">
                ap/heading-hold == 1
            </test>
        </switch>

        <pid name="fcs/heading-pi-controller">
            <input> fcs/heading-roll-error-switch </input>
            <kp> ap/heading-pid-kp </kp>
            <ki> ap/heading-pid-ki </ki>
            <kd> ap/heading-pid-kd </kd>
        </pid>

        <switch name="fcs/roll-command-selector">
            <default value="0.0"/>
            <test value="fcs/heading-pi-controller">
                ap/heading-hold == 1
                gear/unit[2]/WOW == 0
            </test>
            <test value="fcs/roll-ap-autoswitch">
                ap/attitude-hold == 1
                gear/unit[2]/WOW == 0
            </test>
            <output>ap/aileron-heading-cmd</output>
        </switch>

        <switch name="fcs/roll-command-selector-steering">
            <default value="0.0"/>
            <test value="fcs/heading-pi-controller">
                ap/heading-hold == 1
                gear/unit/WOW == 1
            </test>
            <output>fcs/steer-cmd-norm</output>
        </switch>
    </channel>


<!--
=====================================================
ALTITUDE CHANNEL
=====================================================
-->

<!-- Altitude hold -->

    <!-- The Altitude Error component below computes the altitude error, subtracting
     the desired altitude (altitude-setpoint) from the actual altitude above sea
     level (_not_ Above Ground Level).  This error signal is interpreted as an
     hdot command (hdot is time rate of change of altitude, or rate of climb). As
     such it is limited to a maximum absolute value of 12 fps here (720 fpm). The
     maximum achievable climb rate depends on altitude. The commanded climb rate
     is scheduled in the HDot Command component, below. For the given altitude
     (left column in the table), the commanded maaximum climb rate divided by 100
     is given in the right column.
    -->

    <channel name="Pitch altitude hold">

        <!--
          The difference between the desired altitude and the actual altitude
          is determined, and limited to 100. The output from this component is
          the desired climb rate in percent of maximum.
        -->

        <summer name="fcs/altitude-error">
            <input> ap/altitude-setpoint </input>
            <input> -position/h-agl-ft </input>
            <clipto>
                <min>-100</min>
                <max> 100</max>
            </clipto>
        </summer>

        <!--
          The desired climb rate is lagged slightly for stability.
        -->
        <lag_filter name="fcs/alt-error-lag">
            <input> fcs/altitude-error </input>
            <c1> 1 </c1>
        </lag_filter>

        <!--
         Dependent on altitude, the lagged (and limited) altitude error is multipled
         by the gain determined from the function, below. The output from this
         component is the absolute expected climb rate in feet/second. For example, if
         the desired climb rate is 100 percent of maximum and the current altitude is
         1000.0 ft., then the output from this component would be 24.5 ft. sec.
         The equation representing climb rate for the C-310 is:

         ROC (ft/sec) = 25.7 - h/833.33
        -->
        <fcs_function name="fcs/hdot-command">
            <input>fcs/alt-error-lag</input>
            <function>
            <quotient>
                <difference>
                <value>25.70</value>
                <quotient>
                    <property>position/h-sl-ft</property>
                    <value>833.33</value>
                </quotient>
                </difference>
                <value>100.0</value>
            </quotient>
            </function>
        </fcs_function>

        <!--
         This component calculates the climb rate error, taking the difference between
         the commanded climb rate (from the previous component) and actual climb rate
         in ft./sec.
        -->
        <summer name="fcs/hdot-error">
            <input> fcs/hdot-command </input>
            <input> -velocities/h-dot-fps </input>
        </summer>

        <!--
         If the altitude hold autopilot command is ON, then this switch component will
         pass through the climb rate error (from the previous component). Otherwise, it
         will pass zero.
        -->
        <switch name="fcs/ap-alt-hold-switch">
            <default value="0.0"/>
            <test value="fcs/hdot-error">
                ap/altitude-hold == 1
            </test>
        </switch>

        <!--
         The windup trigger below assumes the elevator will travel +/-23 degrees. The
         elevator, however, does not travel symmetrically. This will need to be addressed
         in a fix to the deadband component.
        -->
        <deadband name="fcs/windup-trigger">
            <input> fcs/elevator-pos-deg </input>
            <width>46.0</width>
        </deadband>

        <!--
         The integrator integrates the hdot error (when the switch component passes that
         signal through above when the altitude hold is selected ON). In the situation
         where the elevator becomes saturated, the integrator ceases to integrate. The
         windup protection is indicated below, with the windup-trigger property being
         the trigger to halt integration. When the windup trigger is non-zero (when the
         elevator position falls outside the range +/- 23 degrees - a deadband of 46
         degrees) then the deadband passes a non-zero value, triggering the anti-windup
         logic in the integrator.

         The proportional component multiplies the error signal by a constant, providing
         the proportional control action of this PI altitude hold controller.

         The pid component combines the proportional and integral control
         signals. It clips the sum to +/- 1.0.
        -->
        <pid name="fcs/altitude-hold-pid">
            <input> fcs/ap-alt-hold-switch </input>
            <kp> ap/altit-pid-kp </kp>
            <ki> ap/altit-pid-ki </ki>
            <kd> ap/altit-pid-kd </kd>
            <trigger> fcs/windup-trigger </trigger>
            <clipto>
                <min>-1.0</min>
                <max> 1.0</max>
            </clipto>
        </pid>

        <!--
         The elevator component flips the sign on the output of the control summer
         above and sets the ap/elevator-command property.
        -->
        <pure_gain name="fcs/elevator">
            <input> fcs/altitude-hold-pid </input>
            <gain> -1.0 </gain>
            <output> ap/elevator-altitude-cmd </output>
        </pure_gain>
    </channel>


<!--
=====================================================
LONGITUDINAL ROTATIONS CHANNEL
=====================================================
-->

<!-- Theta angle hold -->

    <channel name="Theta angle hold">

        <!--
         Convert reference angle to radians
        -->
        <pure_gain name="fcs/pitch-target-rad">
            <input> ap/theta-angle-setpoint </input>
            <gain> 0.01745329252 </gain>
        </pure_gain>

        <!--
         Calculate error in radians. Positive error means we want to pitch down,
         and therefore induces a positive command on the elevator.
        -->
        <summer name="fcs/pitch-error-rad">
            <input> attitude/pitch-rad </input>
            <input> -fcs/pitch-target-rad </input>
            <clipto>
                <min>-0.1047</min>
                <max>0.1047</max>
            </clipto>
        </summer>

        <!--
         Define simple PID controller
        -->
        <pid name="fcs/pitch-controller">
            <input> fcs/pitch-error-rad </input>
            <kp> ap/theta-pid-kp </kp>
            <ki> ap/theta-pid-ki </ki>
            <kd> ap/theta-pid-kd </kd>
        </pid>

        <!--
         Define classic "cockpit-like" switch for activating the autopilot
        -->
        <switch name="ap/pitch-cmd-selector">
            <default value="0.0"/>
            <test value="fcs/pitch-controller">
                ap/theta-angle-hold == 1
            </test>
            <output> ap/elevator-theta-cmd </output>
        </switch>

        <!--
         Disable trimming command when activating autopilot. Discouraged.
        -->
        <!-- <switch name="ap/trim-autoswitcher">
            <default value="fcs/pitch-trim-cmd-norm"/>
            <test value="0.0">
                ap/theta-angle-hold == 1
            </test>
            <output> fcs/pitch-trim-cmd-norm </output>
        </switch> -->
    </channel>


<!-- Glide angle hold with elevator -->

    <channel name="Glide angle hold with elevator">

        <!--
         Calculate error in degrees. Positive error means we want to descend,
         and therefore induces a positive command on the elevator.
        -->
        <summer name="fcs/gamma-error-deg">
            <input> -ap/glide-angle-elev-setpoint </input>
            <input> flight-path/gamma-deg </input>
            <clipto>
                <min>-6</min>
                <max>6</max>
            </clipto>
        </summer>

        <!--
         Define simple PID controller
        -->
        <pid name="fcs/gamma-controller">
            <input> fcs/gamma-error-deg </input>
            <kp> ap/gamma-pid-kp </kp>
            <ki> ap/gamma-pid-ki </ki>
            <kd> ap/gamma-pid-kd </kd>
        </pid>

        <!--
         Define classic "cockpit-like" switch for activating the autopilot
        -->
        <switch name="ap/gamma-cmd-selector">
            <default value="0.0"/>
            <test value="fcs/gamma-controller">
                ap/glide-angle-elev-hold == 1
            </test>
            <output> ap/elevator-gamma-cmd </output>
        </switch>
    </channel>


<!--
=====================================================
THROTTLE CHANNEL
=====================================================
-->

<!--
     Maximum negative correction command on throttle. It is assumed that
     the minimum acceptable normalized throttle for a controlled descent is 0.05, so the
     negative correction is bound between the actual throttle level (upper bound)
     and 0.05 (lower bound)
    -->
    <function name="ap/throttle-cmd-norm-inf">
        <difference>
            <v>0.05</v>
            <p>fcs/throttle-cmd-norm</p>
        </difference>
    </function>

    <!--
     Maximum positive correction command on throttle. It is assumed that
     the maximum acceptable normalized throttle for a controlled descent is 1, so the
     positive correction is bound between the actual throttle level (lower bound)
     and 1 (upper bound)
    -->
    <function name="ap/throttle-cmd-norm-sup">
        <difference>
            <v>1</v>
            <p>fcs/throttle-cmd-norm</p>
        </difference>
    </function>


<!-- Glide angle hold with throttle -->

    <channel name="Glide angle hold with throttle">

        <!--
         Calculate error in degrees. Positive error means we want to climb,
         and therefore induces a positive command on the throttle.
        -->
        <summer name="fcs/glide-error-deg">
            <input> -flight-path/gamma-deg </input>
            <input> ap/glide-angle-throt-setpoint </input>
            <clipto>
                <min>-6</min>
                <max>6</max>
            </clipto>
        </summer>

        <!--
         Define simple PID controller
        -->
        <pid name="fcs/throttle-pid">
            <input> fcs/glide-error-deg </input>
            <kp> ap/throttle-pid-kp </kp>
            <ki> ap/throttle-pid-ki </ki>
            <kd> ap/throttle-pid-kd </kd>
            <clipto>
                <min>ap/throttle-cmd-norm-inf</min>
                <max>ap/throttle-cmd-norm-sup</max>
            </clipto>
        </pid>

        <!--
         Define classic "cockpit-like" switch for activating the autopilot
        -->
        <switch name="ap/throttle-cmd-selector">
            <default value="0.0"/>
            <test value="fcs/throttle-pid">
                ap/glide-angle-throt-hold eq 1
            </test>
            <output>ap/throttle-cmd-norm</output>
        </switch>
    </channel>


<!-- Airspeed hold with throttle -->

    <channel name=" Airspeed hold with throttle">

        <!--
         Calculate error in degrees. Positive error means we want to climb,
         and therefore induces a positive command on the throttle.
        -->
        <summer name="fcs/airspeed-error-deg">
            <input> ap/airspeed-throt-setpoint </input>
            <input> -velocities/vtrue-kts </input>
            <clipto>
                <min>-20</min>
                <max>20</max>
            </clipto>
        </summer>

        <!--
         Define simple PID controller
        -->
        <pid name="fcs/airspeed-throttle-pid">
            <input> fcs/airspeed-error-deg </input>
            <kp> ap/V-throttle-pid-kp </kp>
            <ki> ap/V-throttle-pid-ki </ki>
            <kd> ap/V-throttle-pid-kd </kd>
            <clipto>
                <min>ap/throttle-cmd-norm-inf</min>
                <max>ap/throttle-cmd-norm-sup</max>
            </clipto>
        </pid>

        <!--
         Define classic "cockpit-like" switch for activating the autopilot
        -->
        <switch name="ap/V-throttle-cmd-selector">
            <default value="0.0"/>
            <test value="fcs/airspeed-throttle-pid">
                ap/airspeed-throt-hold eq 1
            </test>
            <output>ap/throttle-cmd-norm</output>
        </switch>
    </channel>

</autopilot>
